"use client";

import { useEffect, useRef, useState } from "react";
import Hls from "hls.js";

export default function WatchPage() {
  const videoRef = useRef<HTMLVideoElement>(null);
  const hlsRef = useRef<Hls | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);

  // The path to the HLS manifest generated by FFMpeg
  const hlsUrl = "/live/stream.m3u8";

  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    if (Hls.isSupported()) {
      // HLS.js is supported, use it for HLS playback
      const hls = new Hls({
        enableWorker: true,
        lowLatencyMode: true,
        backBufferLength: 90,
      });

      hlsRef.current = hls;

      hls.loadSource(hlsUrl);
      hls.attachMedia(video);

      hls.on(Hls.Events.MANIFEST_PARSED, () => {
        console.log("HLS manifest parsed successfully");
        setIsLoading(false);
        setError(null);
      });

      hls.on(Hls.Events.ERROR, (event, data) => {
        console.error("HLS error:", data);
        setError(`HLS Error: ${data.details}`);
        setIsLoading(false);
      });

      hls.on(Hls.Events.MEDIA_ATTACHED, () => {
        console.log("HLS media attached");
      });
    } else if (video.canPlayType("application/vnd.apple.mpegurl")) {
      // Native HLS support (Safari/iOS)
      console.log("Using native HLS support");
      video.src = hlsUrl;
      setIsLoading(false);
      setError(null);
    } else {
      setError("HLS is not supported in this browser");
      setIsLoading(false);
    }

    // Video event listeners
    const handleLoadStart = () => setIsLoading(true);
    const handleCanPlay = () => setIsLoading(false);
    const handlePlay = () => setIsPlaying(true);
    const handlePause = () => setIsPlaying(false);
    const handleError = () => {
      setError("Video playback error");
      setIsLoading(false);
    };

    video.addEventListener("loadstart", handleLoadStart);
    video.addEventListener("canplay", handleCanPlay);
    video.addEventListener("play", handlePlay);
    video.addEventListener("pause", handlePause);
    video.addEventListener("error", handleError);

    // Cleanup
    return () => {
      if (hlsRef.current) {
        hlsRef.current.destroy();
        hlsRef.current = null;
      }
      video.removeEventListener("loadstart", handleLoadStart);
      video.removeEventListener("canplay", handleCanPlay);
      video.removeEventListener("play", handlePlay);
      video.removeEventListener("pause", handlePause);
      video.removeEventListener("error", handleError);
    };
  }, [hlsUrl]);

  const handlePlayPause = () => {
    const video = videoRef.current;
    if (!video) return;

    if (video.paused) {
      video.play();
    } else {
      video.pause();
    }
  };

  const handleRefresh = () => {
    const video = videoRef.current;
    if (!video) return;

    setIsLoading(true);
    setError(null);

    if (hlsRef.current) {
      hlsRef.current.loadSource(hlsUrl);
    } else if (video.canPlayType("application/vnd.apple.mpegurl")) {
      video.load();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen gap-6 p-8">
      <h1 className="text-3xl font-bold text-gray-800">HLS Live Stream</h1>

      <div className="relative w-full max-w-4xl">
        <video
          ref={videoRef}
          className="w-full h-auto border-2 border-gray-300 rounded-lg shadow-lg"
          controls
          autoPlay
          muted
          playsInline
        />

        {isLoading && (
          <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-lg">
            <div className="text-white text-lg">Loading stream...</div>
          </div>
        )}

        {error && (
          <div className="absolute inset-0 flex items-center justify-center bg-red-500 bg-opacity-75 rounded-lg">
            <div className="text-white text-center p-4">
              <div className="text-lg font-semibold mb-2">Error</div>
              <div className="text-sm">{error}</div>
            </div>
          </div>
        )}
      </div>

      <div className="flex gap-4">
        <button
          onClick={handlePlayPause}
          className={`px-6 py-2 rounded-lg text-white font-medium ${
            isPlaying
              ? "bg-red-500 hover:bg-red-600"
              : "bg-green-500 hover:bg-green-600"
          }`}
          disabled={!!error}
        >
          {isPlaying ? "‚è∏Ô∏è Pause" : "‚ñ∂Ô∏è Play"}
        </button>

        <button
          onClick={handleRefresh}
          className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg"
        >
          üîÑ Refresh Stream
        </button>
      </div>

      <div className="text-sm text-gray-600 text-center max-w-2xl">
        <p>
          Stream URL:{" "}
          <code className="bg-gray-100 px-2 py-1 rounded">{hlsUrl}</code>
        </p>
        {Hls.isSupported() ? (
          <p className="mt-2 text-green-600">‚úÖ HLS.js supported</p>
        ) : (
          <p className="mt-2 text-orange-600">‚ö†Ô∏è Using native HLS support</p>
        )}
      </div>
    </div>
  );
}
